name: .NET CI Pipeline

on:
  push:
    branches:
      - main
      - develop
      - feature/* # Qualquer branch feature
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore Producer/CreateContact/CriarContatos.Api.sln

    - name: Build
      run: dotnet build Producer/CreateContact/CriarContatos.Api.sln --no-restore --configuration Release

    - name: Publish Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          Producer/CreateContact/CriarContatos.Test/bin/Release/net8.0/
          Producer/CreateContact/CriarContatos.Api/bin/Release/net8.0/

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: .

    - name: Start RabbitMQ
      run: |
        docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3-management
        sleep 10 # Aguarda RabbitMQ subir

    - name: Listar arquivos gerados
      run: ls -R .

    - name: Start API in Background
      run: |
        dotnet Producer/CreateContact/CriarContatos.Api/bin/Release/net8.0/CriarContatos.Api.dll &
        sleep 5 # Espera a API subir

    - name: Test API Health
      run: curl -f http://localhost:5102 || exit 1

    - name: Test API Metrics
      run: curl -f http://localhost:5102/metrics || exit 1

    - name: Run all tests
      run: dotnet test Producer/CreateContact/CriarContatos.Test/CriarContatos.Test.csproj --configuration Release --logger "trx;LogFileName=TestResults/all-test-results.trx" --results-directory CriarContatos.Test/TestResults

    - name: Publish Test Results
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: CriarContatos.Test/TestResults

    - name: Cleanup
      run: docker rm -f rabbitmq || true

  setup-monitoring:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Setup Prometheus
      run: docker run -d --name prometheus -p 9090:9090 -v prometheus_data:/prometheus prom/prometheus

    - name: Setup Grafana
      run: docker run -d --name grafana -p 3000:3000 -v grafana_data:/var/lib/grafana grafana/grafana

    - name: Wait for Grafana to start 
      run: |
        for i in {1..10}; do
          if curl -L -f http://localhost:3000 > /dev/null; then
            echo "Grafana started"
            exit 0
          fi
          echo "Waiting for Grafana..."
          sleep 3
        done
        echo "Grafana failed to start"
        exit 1

    - name: Verify Prometheus 
      run: curl -f http://localhost:9090/metrics || exit 1

    - name: Verify Grafana
      run: curl -L -f http://localhost:3000 > /dev/null || exit 1

    - name: Grafana Error Logs
      if: failure()
      run: docker logs grafana

    - name: Cleanup Docker containers
      if: always()
      run: |
        docker rm -f prometheus || true
        docker rm -f grafana || true
