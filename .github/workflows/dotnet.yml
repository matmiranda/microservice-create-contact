name: .NET CI Pipeline

on:
  push:
    branches:
      - main
      - develop
      - feature/*
  pull_request:
    branches:
      - main

jobs:
  setup-services:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Start RabbitMQ via Docker Compose
        run: |
          docker-compose -f docker-compose.rabbitmq.yml up -d
          docker ps

      - name: Wait for RabbitMQ to be Ready
        run: |
          for i in {1..10}; do
            if curl -f http://localhost:15672 > /dev/null 2>&1; then
              echo "RabbitMQ is up"
              exit 0
            fi
            echo "Waiting for RabbitMQ... Attempt $i of 10"
            sleep 3
          done
          echo "RabbitMQ failed to start"
          exit 1

  build-and-test:
    runs-on: ubuntu-latest
    needs: setup-services
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore Producer/CreateContact/CriarContatos.Api.sln

      - name: Build
        run: dotnet build Producer/CreateContact/CriarContatos.Api.sln --configuration Release

      - name: Run Unit Tests
        run: dotnet test Producer/CreateContact/CriarContatos.Test/CriarContatos.Test.csproj --configuration Release

  start-api:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v4

      - name: Start API in Background
        env:
          ASPNETCORE_URLS: http://localhost:5102
        run: |
          cd CriarContatos.Api/bin/Release/net8.0/
          dotnet CriarContatos.Api.dll &

          for i in {1..10}; do
            if curl -f http://localhost:5102/health > /dev/null 2>&1; then
              echo "API started successfully"
              exit 0
            fi
            echo "Waiting for API to start... Attempt $i of 10"
            sleep 3
          done
          echo "API failed to start"
          exit 1

  setup-monitoring:
    runs-on: ubuntu-latest
    needs: start-api
    steps:
      - name: Setup Prometheus
        run: |
          mkdir -p prometheus
          echo "
          global:
            scrape_interval: 5s
          scrape_configs:
            - job_name: 'dotnet-api'
              metrics_path: '/metrics'
              static_configs:
                - targets: ['localhost:5102']
          " > prometheus/prometheus.yml

          docker run -d --name prometheus -p 9090:9090 -v $(pwd)/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus

      - name: Setup Grafana
        run: docker run -d --name grafana -p 3000:3000 grafana/grafana

      - name: Verify Prometheus and Grafana
        run: |
          curl -f http://localhost:9090/-/ready
          curl -L -f http://localhost:3000
          
  cleanup:
    runs-on: ubuntu-latest
    needs: [build-and-test, setup-monitoring]
    if: always()
    steps:
      - name: Cleanup Docker containers
        run: |
          docker rm -f rabbitmq || true
          docker rm -f prometheus || true
          docker rm -f grafana || true
          docker volume rm prometheus_data || true
          docker volume rm grafana_data || true
